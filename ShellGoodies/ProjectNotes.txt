
BUILD the shell extension:
=========================
- If already loaded, cannot link the dll: kill the explorer.exe process from Task Manager.
- Windows 10: run Visual Studio 2008 as administrator:
	- This allows proper registration of the shell extension dll.
	- For proper registration in the final location use "Tools > Copy to Tools/mine/" and "Tools > Register DLL to Tools/mine/" while running as administrator.


DEBUG the shell extension (ShellGoodies64.dll/ShellGoodies32.dll):
=========================
1) Use ExplorerBrowser tool from CodeProject
- this works like a charm for 32/64 bit shell extension.
- it doesn't lock the dll, you can set breakpoints in the code for Debug or Release builds.
	Solution > ShellGoodies > Properties > Debugging:
		For 32-bit:
			command: $(MY_TOOLS_MINE)\ExplorerBrowser32.exe
			working directory: C:\my\download\
		For 64-bit:
			command: $(MY_TOOLS_MINE)\ExplorerBrowser64.exe
			working directory: C:\my\download\

2) Using Windows Explorer - not so good, there are many issues with breaking the program in the debugger, after which the Explorer window becomes inaccessible.
	Explorer: Tools > Folder Options > View:
		[ ] Launch folder windows in a separate process
		- easier to unload the dll due to not having multiple copies of explorer.exe
	Solution > ShellGoodies > Properties > Debugging:
		command: C:\Windows\explorer.exe
		command arguments: /select,"C:\my\download\env.txt"
		attach: No
	Explorer: load the ShellGoodies shell extension (right click on a file), the attach the debugger to the corresponding explorer.exe process instance.


DEBUG the REGISTRATION of shell extension (through regsvr32.exe):
=========================================
	Command=regsvr32.exe
	Command Arguments=-s $(TargetPath)
Normal dll debug:
	Command=C:\my\Tools\mine\ExplorerBrowser64.exe
	Command Arguments=

Note:
	On Windows 10, you need to run Visual Studio as Administrator for the regsvr32.exe to succeed!


Customize for dual VC9/VC17 projects:
====================================
1) ShellGoodies > Properties > Configuration Properties > General:
	Output Directory=$(ProjectDir)bin\vc9\$(PlatformName)_$(ConfigurationName)
	Intermediate Directory=$(OutDir)

		Note:
			I prefixed with "$(ProjectDir)", so that $(IntDir) is no longer a relative path.
			That's required so that when I customize MIDL settings on ShellGoodies.idl and set Output Directory=gen\vc9,
			it doesn't generate the .tlb deep under gen\vc9\bin\vc9\Win32_DebugU\ShellGoodies.tlb

2) ShellGoodies > Properties > Configuration Properties > MIDL > Output:	[2025-05-31]
- select "ShellGoodies" project:
	Output directory=gen
	Header File=$(ProjectName)_i.h
	DLL Data File=dlldata.c
	IID File=$(ProjectName)_i.c
	Proxy File=$(ProjectName)_p.c
	Generate Type Library=Yes
	Type Library=$(IntDir)/$(ProjectName).tlb
- select "ShellGoodies.idl" file:
	- All settings are inherited from project default:
	Output directory=gen
	Header File=$(ProjectName)_i.h
	DLL Data File=dlldata.c
	IID File=$(ProjectName)_i.c
	Proxy File=$(ProjectName)_p.c
	Generate Type Library=Yes
	Type Library=$(IntDir)/$(ProjectName).tlb

3) Create project filters "Source Files/gen" and "Source Files/gen/excluded", and add the following files:
	Source Files/gen
		ShellGoodies_i.c
		ShellGoodies_i.h
		ShellGoodies_p.c
	Source Files/gen/excluded
		dlldata.c

Select the 4 files, right-click Properties > Configuration Properties > General:
	Exclude From Build=Yes

4) Build the project
- Update the source files with #include "ShellGoodies_i.*" => prefix with subdirectory "gen/ShellGoodies_i.*".
- Delete the old generated files in project directory "ShellGoodies_i.*".
- Build the project and ensure is successful.


HISTORY
=======
1) 4 November 2018: According to Michael Dunn's article:		https://www.codeproject.com/Articles/441/The-Complete-Idiot-s-Guide-to-Writing-Shell-Extens
- This may have an impact on preventing context menu deadlocks in Explorer on Windows 10 (to verify).

Remove OLE Automation features that we don't need (wizard-generated code) from ShellGoodies.rgs.
 - The original wizard-generated is backed up at res\ShellGoodies-old (wizard-generated).rgs.
Remove the type library from ShellGoodies.rc resources: Resource Includes > Compile-time directives, remove the line:
	1 TYPELIB "ShellGoodies.tlb"
Change module server registration in ShellGoodies.cpp:
	return g_atlModule.RegisterServer( FALSE );			// registers object, NO TYPELIB (read ProjectNotes.txt)
	return g_atlModule.UnregisterServer( FALSE );		// NO TYPELIB (read ProjectNotes.txt)

Final registration detail: on NT it's advisable to put our shell extension in a list of "approved" extensions.
There is a system policy that can be set to prevent extensions from being loaded if they are not on the approved list.
The list is stored in:
	HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Shell Extensions\Approved

In this key, we create a string value whose name is our GUID. The contents of the string can be anything.
The code to do this goes in our DllRegisterServer() and DllUnregisterServer() functions.
In ShellGoodies.cpp:
	AddAsApprovedShellExtension();
	RemoveAsApprovedShellExtension();

2) [30-Jan-2023]
There seems to be a redundant entry in the ShellGoodies.rgs file (a remnant of the past...).
Remove the value under CurrentVersion\:
	HKLM
	{
		SOFTWARE
		{
			Microsoft
			{
				Windows
				{
					CurrentVersion
					{
						val {1D4EA504-89A1-11D5-A57D-0050BA0E2E4A} = s 'Rename Files'
						...

Remove in ShellGoodies.cpp the functions (redundant, since the ShellGoodies.rgs file takes care of that):
	AddAsApprovedShellExtension();
	RemoveAsApprovedShellExtension();

3) [31-Jan-2023]
Generated ShellGoodies_vc17.sln with ATL AppWizard in VC++ 2022, with the options:
	Template: ATL Project
	Project Name: ShellGoodies
	Location: C:\download
	[X] Place solution and project in the same directory

  Press Create:
	Application Type: Dynamic Link Library (.dll)
	[ ] Allow merging of proxy/stub code
	[X] Support MFC

Migrated ShellGoodies_vc17.sln in DevTools\ShellGoodies.

4) [2025-06-01]
Replaced 'CComModule g_comModule;' with 'CShellGoodiesModule g_atlModule;' ATL DLL module singleton object.
This was inspired by the new wizard-generated ATL DLL project: C:\Users\Paul\source\repos\ShellGoodies\ShellGoodies.sln in Visual Studio 2022.



BUGS:
====
1) Deadlock on loading ShellGoodies*.dll (64/32 bit, RELEASE/DEBUG):
When ShellGoodies64.dll (or 32) is registered and enabled (ShellExView), sometimes when right clicking on a FOLDER *first time* in Explorer.exe (or ExplorerBrowser64.exe), a deadlock occurs.
This happens in global/static variables initialization, during initialization of "AFX_GLOBAL_DATA afxGlobalData;", when calling SHAppBarMessage():
	shell32.dll!SHAppBarMessage()  + 0xf7 bytes	
>	ShellGoodies64.dll!AFX_GLOBAL_DATA::OnSettingChange()  Line 546 + 0x10 bytes	C++
	ShellGoodies64.dll!AFX_GLOBAL_DATA::AFX_GLOBAL_DATA()  Line 254	C++
	ShellGoodies64.dll!`dynamic initializer for 'afxGlobalData''()  Line 149 + 0x10 bytes	C++
	ShellGoodies64.dll!_initterm(void (void)* * pfbegin=0x0000000007f5ea98, void (void)* * pfend=0x0000000007f5f3c8)  Line 903	C
	ShellGoodies64.dll!_cinit(int initFloatingPrecision=0x00000000)  Line 320	C
	ShellGoodies64.dll!_CRT_INIT(void * hDllHandle=0x0000000007460000, unsigned long dwReason=0x00000001, void * lpreserved=0x0000000000000000)  Line 132 + 0x19 bytes	C
	ShellGoodies64.dll!__DllMainCRTStartup(void * hDllHandle=0x0000000007460000, unsigned long dwReason=0x00000001, void * lpreserved=0x0000000000000000)  Line 312 + 0x13 bytes	C
	ShellGoodies64.dll!_DllMainCRTStartup(void * hDllHandle=0x0000000007460000, unsigned long dwReason=0x00000001, void * lpreserved=0x0000000000000000)  Line 282	C

- Quick workaround is to right click on a file to open context menu, then it starts working for folders.
- Read: https://answers.microsoft.com/en-us/windows/forum/all/windows-explorer-not-responding-loader-lock-active/fc695f5b-a4cb-47fd-a747-e95770e444bf
