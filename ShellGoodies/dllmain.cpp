// ShellGoodies.cpp : Implementation of DLL Exports (generated by ATL AppWizard).

// Note: Proxy/Stub Information
//	  To merge the proxy/stub code into the object DLL, add the file
//	  dlldatax.c to the project.  Make sure precompiled headers
//	  are turned off for this file, and add _MERGE_PROXYSTUB to the
//	  defines for the project.
//
//	  If you are not running WinNT4.0 or Win95 with DCOM, then you
//	  need to remove the following define from dlldatax.c
//	  #define _WIN32_WINNT 0x0400
//
//	  Further, if you are running MIDL without /Oicf switch, you also
//	  need to remove the following define from dlldatax.c.
//	  #define USE_STUBLESS_PROXY
//
//	  Modify the custom build rule for ShellGoodies.idl by adding the following
//	  files to the Outputs.
//		  ShellGoodies_p.c
//		  dlldata.c
//	  To build a separate proxy/stub DLL,
//	  run nmake -f ShellGoodiesps.mk in the project directory.

#include "pch.h"
#include "dllmain.h"
#include "Application.h"

#include "gen/ShellGoodies_i.h"
#include "gen/ShellGoodies_i.c"		// for LIBID_ShellGoodiesLib linkage


CShellGoodiesModule g_atlModule;	// the ATL DLL module global singleton (replaces the CComModule singleton)


// Used to determine whether the DLL can be unloaded by OLE
//
STDAPI DllCanUnloadNow( void )
{
	AFX_MANAGE_STATE( AfxGetStaticModuleState() );
	return ( S_OK == AfxDllCanUnloadNow() && 0 == g_atlModule.GetLockCount() ) ? S_OK : S_FALSE;
}


// Returns a class factory to create an object of the requested type.
//
STDAPI DllGetClassObject( REFCLSID rclsid, REFIID riid, LPVOID* ppv )
{
	return g_atlModule.GetClassObject(rclsid, riid, ppv);
}

// Adds entries to the system registry.
//
STDAPI DllRegisterServer( void )
{
	// OBSOLETE: the type library is not necessary for a shell extension DLL
	//return HR_AUDIT( g_atlModule.RegisterServer( TRUE ) );	// registers object, typelib and all interfaces in typelib

	return HR_AUDIT( g_atlModule.RegisterServer( FALSE ) );		// registers object, NO TYPELIB (read ProjectNotes.txt)
}

// Removes entries from the system registry.
//
STDAPI DllUnregisterServer( void )
{
	// OBSOLETE: the type library is not necessary for a shell extension DLL
	//return HR_AUDIT( g_atlModule.UnregisterServer( TRUE ) );

	return HR_AUDIT( g_atlModule.UnregisterServer( FALSE ) );	// NO TYPELIB (read ProjectNotes.txt)
}

// Adds/Removes entries to the system registry per user per machine.
//
STDAPI DllInstall( BOOL install, /*_In_opt_*/ LPCWSTR pCmdLine )
{
	static const wchar_t s_userSwitch[] = L"user";
	HRESULT hResult = E_FAIL;

	if ( pCmdLine != nullptr )
	{
		if ( 0 == _wcsnicmp( pCmdLine, s_userSwitch, _countof( s_userSwitch ) ) )
			ATL::AtlSetPerUserRegistration( true );
	}

	if ( install )
	{
		if ( !HR_OK( hResult = DllRegisterServer() ) )
			DllUnregisterServer();
	}
	else
		HR_AUDIT( hResult = DllUnregisterServer() );

	return hResult;
}
